load("C:/Users/Xin/OneDrive/bangmang/Data analysis/code/diff_y_try3.Rdata")
dim(res_mr)
load("C:/Users/Xin/OneDrive/bangmang/Data analysis/code/diff_y_try2.Rdata")
rm(list=ls());
load("C:/Users/Xin/OneDrive/bangmang/Data analysis/code/diff_y_try2.Rdata")
mean_result_mr
possible_indx
rm(list=ls());
load("C:/Users/Xin/OneDrive/bangmang/Data analysis/code/diff_y_try1.Rdata")
rm(list=ls());
load("C:/Users/Xin/OneDrive/bangmang/Data analysis/code/sel_genes.Rdata")
paste(length(possible_indx),'_y_all_G.Rdata',sep="")
possible_indx=1:10
paste(length(possible_indx),'_y_all_G.Rdata',sep="")
110+72+90+150
93+17.66
load("C:/Users/Xin/OneDrive/bangmang/Data analysis/code/318_y_all_G_11_04.Rdata")
25*1.5
a=c(1,1,1,3,4)
median(a)
a=c(1,1,1,3,3)
median(a)
1.1/0.95-1
rm(list=ls())
library(MASS)
library(doParallel)
library(foreach)
library(parallel)
library(randomForest)
library(xgboost)
library(parallelSVM)
library(caret)
library(ranger)
library(glmnet)
install.packages("xgboost")
install.packages("parallelSVM")
install.packages("caret")
install.packages("glmnet")
install.packages("ranger")
rm(list=ls())
library(MASS)
library(doParallel)
library(foreach)
library(parallel)
library(randomForest)
library(xgboost)
library(parallelSVM)
library(caret)
library(ranger)
library(glmnet)
install.packages("randomForest")
?xgboost
rm(list=ls())
library(MASS)
library(doParallel)
library(foreach)
library(parallel)
library(randomForest)
library(xgboost)
library(parallelSVM)
library(caret)
library(ranger)
library(glmnet)
?xgboost
load("C:/Users/Xin/OneDrive/Documents/new 542/Project/code/xgboost.rdata")
xgb_err_1step
sel_para_1step[,1]
seq(0,1,length.out=10)#
xgb_err_rate
xgb_err_2step
xgb_err_1step
indx_test_pred_zero
cla_pred
rm(list=ls())
library(MASS)
library(doParallel)
library(foreach)
library(mvtnorm)
library(ContaminatedMixt)
# library(distrEllipse)
# setwd("C:\\Users\\Xin\\OneDrive\\research\\change point covariance\\code\\simulation")
# setwd('/home/xin/OneDrive/Research/change point covariance/code/simulation')
# setwd("/home/xin/Dropbox/Research/change point covariance/code/simulation")
setwd("C:\\Users\\Xin\\Dropbox\\Research\\change point covariance\\code\\simulation")
source("change_point_bootstrap_lib.R")
# -------------------------------------------
# Simulation setup
# -------------------------------------------
ncores=8
n=100
d=40
nBoot=100
#bandwidth fitting
# b=0.8*n^(-1/5)
b=0.1
Sigma1=diag(rep(1,d))
Sigma2=diag(rep(1,d))
cp_indx=50#the index of the change point
#data generation
para=list(Sigma1=Sigma1,Sigma2=Sigma2,
df=10)
X=bootstrap_gen(n,d,cp_indx,family='normal',para=para)
#bootstrap
W=bootstrap_fit(X,nBoot,b,ncores)
W_sort=sort(W)
#Empirical cdf of W
ecdf_W=ecdf(W)
prob_W=ecdf_W(W_sort)#discontinuity points of W's ecdf
prob_W_interval=c(0,prob_W[-length(prob_W)])
alpha=seq(0.01,0.99,length.out=25)#range of probability
#sample quantile (prob 0 represents smallest sample while prob 1 represents largest sample)
sq=sapply(1:length(alpha),FUN=function(x){
W_sort[sum(alpha[x]>prob_W_interval)]
})
# sq=quantile(W, probs = alpha)
alpha_hat=sapply(1:length(sq),FUN=function(x){
mean(W_sort<=sq[x])
})
plot(alpha,alpha_hat,xlab='alpha',ylab='Bootstrap approximation',type='b')
abline(a=0,b=1)
# save.image("change_point_detection.Rdata")
rm(list=ls())
library(MASS)
library(doParallel)
library(foreach)
library(mvtnorm)
library(ContaminatedMixt)
# library(distrEllipse)
# setwd("C:\\Users\\Xin\\OneDrive\\research\\change point covariance\\code\\simulation")
# setwd('/home/xin/OneDrive/Research/change point covariance/code/simulation')
# setwd("/home/xin/Dropbox/Research/change point covariance/code/simulation")
setwd("C:\\Users\\Xin\\Dropbox\\Research\\change point covariance\\code\\simulation")
source("change_point_bootstrap_lib.R")
# -------------------------------------------
# Simulation setup
# -------------------------------------------
ncores=8
n=100
d=40
nBoot=100
#bandwidth fitting
# b=0.8*n^(-1/5)
b=0.1
Sigma1=diag(rep(1,d))
Sigma2=diag(rep(1,d))
cp_indx=50#the index of the change point
#data generation
para=list(Sigma1=Sigma1,Sigma2=Sigma2,
df=10)
X=bootstrap_gen(n,d,cp_indx,family='t',para=para)
#bootstrap
W=bootstrap_fit(X,nBoot,b,ncores)
W_sort=sort(W)
#Empirical cdf of W
ecdf_W=ecdf(W)
prob_W=ecdf_W(W_sort)#discontinuity points of W's ecdf
prob_W_interval=c(0,prob_W[-length(prob_W)])
alpha=seq(0.01,0.99,length.out=25)#range of probability
#sample quantile (prob 0 represents smallest sample while prob 1 represents largest sample)
sq=sapply(1:length(alpha),FUN=function(x){
W_sort[sum(alpha[x]>prob_W_interval)]
})
# sq=quantile(W, probs = alpha)
alpha_hat=sapply(1:length(sq),FUN=function(x){
mean(W_sort<=sq[x])
})
plot(alpha,alpha_hat,xlab='alpha',ylab='Bootstrap approximation',type='b')
abline(a=0,b=1)
# save.image("change_point_detection.Rdata")
rm(list=ls())
library(MASS)
library(doParallel)
library(foreach)
library(mvtnorm)
library(ContaminatedMixt)
# library(distrEllipse)
# setwd("C:\\Users\\Xin\\OneDrive\\research\\change point covariance\\code\\simulation")
# setwd('/home/xin/OneDrive/Research/change point covariance/code/simulation')
# setwd("/home/xin/Dropbox/Research/change point covariance/code/simulation")
setwd("C:\\Users\\Xin\\Dropbox\\Research\\change point covariance\\code\\simulation")
source("change_point_bootstrap_lib.R")
# -------------------------------------------
# Simulation setup
# -------------------------------------------
ncores=8
n=100
d=40
nBoot=100
#bandwidth fitting
b=0.8*n^(-1/5)
# b=0.1
Sigma1=diag(rep(1,d))
Sigma2=diag(rep(1,d))
cp_indx=50#the index of the change point
#data generation
para=list(Sigma1=Sigma1,Sigma2=Sigma2,
df=10)
X=bootstrap_gen(n,d,cp_indx,family='mix',para=para)
#bootstrap
W=bootstrap_fit(X,nBoot,b,ncores)
W_sort=sort(W)
#Empirical cdf of W
ecdf_W=ecdf(W)
prob_W=ecdf_W(W_sort)#discontinuity points of W's ecdf
prob_W_interval=c(0,prob_W[-length(prob_W)])
alpha=seq(0.01,0.99,length.out=25)#range of probability
#sample quantile (prob 0 represents smallest sample while prob 1 represents largest sample)
sq=sapply(1:length(alpha),FUN=function(x){
W_sort[sum(alpha[x]>prob_W_interval)]
})
# sq=quantile(W, probs = alpha)
alpha_hat=sapply(1:length(sq),FUN=function(x){
mean(W_sort<=sq[x])
})
plot(alpha,alpha_hat,xlab='alpha',ylab='Bootstrap approximation',type='b')
abline(a=0,b=1)
# save.image("change_point_detection.Rdata")
b
